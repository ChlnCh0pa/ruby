
# Метод для поиска наименьшего элемента в массиве
def найти_мин_элемент(массив)
	#
	if массив.empty?
		return puts "Массив пустой"
	else
		наименьший = массив[0]
		массив.each do |элемент|
			наименьший = элемент if элемент < наименьший
		end
	end
	наименьший
end

# Метод для поиска наибольшего элемента в массиве
def найти_макс_элемент(массив)

	if массив.empty?
		return puts "Массив пустой"
	else
		наибольший = массив[0]
		массив.each do |элемент|
			наибольший = элемент if элемент > наибольший
		end
	end
	наибольший
end

# Метод для нахождения индекса первого положительного элемента
def индекс_первого_положительного(массив)
	
	if массив.empty?
		return puts "Массив пустой"
	else
		массив.each_with_index do |элемент, индекс|
			if элемент >= 0
				# Возвращаем индекс с поправкой на человеческую нумерацию
				return индекс + 1
			end
		end
	
		return "Нет положительных элементов"
	end
end

# Программа для выбора метода по номеру и обработки массива
def выбор_метода(номер_метода, массив)
	if массив.empty?
		puts "Массив пуст (проверьте доступ к файлу)"
	else
		case номер_метода
		when 1
			puts "Наименьший элемент массива: #{найти_мин_элемент(массив)}"
		when 2
			puts "Наибольший элемент массива: #{найти_макс_элемент(массив)}"
		when 3
			puts "Индекс первого положительного элемента: #{индекс_первого_положительного(массив)}"
		else
			puts "Неверный номер метода"
		end
	end
end

# Запрос у пользователя метода и пути к файлу
if ARGV.length == 2
	метод = ARGV[0].to_i
	путь_к_файлу = ARGV[1]
else
	puts "Выберите метод для работы с массивом:"
	puts "1 Найти минимальный элемент"
	puts "2 Найти максимальный элемент"
	puts "3 Найти индекс первого положительного элемента"
	метод = gets.chomp.to_i
	puts "Введите путь к файлу с массивом:"
	путь_к_файлу = gets.chomp
end

begin
	
	файл = File.read(путь_к_файлу)
	массив_из_файла = файл.split.map(&:to_i)

	
	выбор_метода(метод, массив_из_файла)
rescue Errno::ENOENT
	puts "Файл не найден"
end
